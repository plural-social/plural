datasource db {
  provider = "postgres"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  //output = "../../node_modules/.prisma/client"
}

enum Permission {
  VIEW
  POST
  EDIT
  ADMIN
  OWNER
}

enum ContentType {
  NOTE
  REPOST
}

enum AuthorType {
  FEATURED
  BYLINE
  NAMED
  PRIVATE
}

enum Visibility {
  PUBLIC
  UNLISTED
  FOLLOWERS
  MUTUALS
  SYSTEM
  PRIVATE
}

enum Protocol {
  ACTIVITYSTREAMS
  MASTODON
}

enum TaskStatus {
  PENDING // queued
  RUNNING // actively running
  SUCCESS // has data
  FAILED  // may or may not retry
}

enum RemoteEntityType {
  PERSON
  NOTE
  HASHTAG
}

enum RemoteField {
  NAME
  SUMMARY
  PREFERRED_USERNAME
}

enum FieldLanguage {
  EN
}

model Email {
  id              Int         @id @default(autoincrement())
  email           String
  code            String
  requestedAt     DateTime    @default(now())
  verifiedAt      DateTime?
  accountId       String?
  account         Account?    @relation(fields: [accountId], references: [id])
}

model Account {
  id              String      @id
  password        String?
  emails          Email[]
  identities      IdentityGrant[]
}

model DisplayName {
  id              String      @id @default(cuid())
  name            String
  nameVisibility  Visibility
  displayName     String
  displayNameVisibility Visibility
  bio             String      @default("")
  bioVisibility   Visibility  @default(PRIVATE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  identities      Identity[]
  profiles        Profile[]
}

model Identity {
  id              String      @id
  displayId       String
  display         DisplayName @relation(fields: [displayId], references: [id])
  createdAt       DateTime    @default(now())
  notesAuthored   NoteAuthor[]
  grants          IdentityGrant[]
  profiles        ProfileGrant[]
}

model IdentityGrant {
  id              String      @id @default(cuid())
  accountId       String
  account         Account     @relation(fields: [accountId], references: [id])
  identityId      String
  identity        Identity    @relation(fields: [identityId], references: [id])
  permission      Permission  @default(VIEW)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Profile {
  id              String      @id
  displayId       String
  display         DisplayName @relation(fields: [displayId], references: [id])
  visibility      Visibility
  slug            String
  subdomain       Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  parentId        String?
  parent          Profile?    @relation(name: "tree", fields: [parentId], references: [id])
  children        Profile[]   @relation(name: "tree")
  access          ProfileGrant[]
  content         Item[]
}

model ProfileGrant {
  id              String      @id @default(cuid())
  identityId      String
  identity        Identity    @relation(fields: [identityId], references: [id])
  profileId       String
  profile         Profile     @relation(fields: [profileId], references: [id])
  permission      Permission  @default(VIEW)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model NoteAuthor {
  id              String      @id @default(cuid())
  noteId          String
  note            Note        @relation(fields: [noteId], references: [id])
  authorId        String
  author          Identity    @relation(fields: [authorId], references: [id])
}

model NoteDraft {
  id              String      @id @default(cuid())
  content         String
  noteId          String
  note            Note        @relation(fields: [noteId], references: [id])
  stableDraftOf   Note?       @relation(name: "stable")
}

model Note {
  id              String      @id
  stableId        String?     @unique
  stableDraft     NoteDraft?  @relation(name: "stable", fields: [stableId], references: [id])
  authors         NoteAuthor[]
  publishes       Item[]      @relation(name: "author")
  drafts          NoteDraft[]
}

model RemoteEntity {
  id              String      @id @default(cuid())
  url             String      @unique
  protocol        Protocol
  type            RemoteEntityType
  firstSeenAt     DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  profile         RemoteProfile?
  note            RemoteNote?
  queries         RemoteQuery[]
  fields          REField[]
}

// Remote Entity FIELD
model REField {
  id              String      @id @default(cuid())
  entityId        String
  field           RemoteField
  lang            FieldLanguage?
  verified        Boolean
  value           String
  entity          RemoteEntity @relation(fields: [entityId], references: [id])

  @@index([entityId, field, lang])
}

// A specific query for a remote entity.
// May not turn out to be a relevant `RemoteEntity`, or may resolve/redirect
// to an already known entity.
model RemoteQuery {
  id              String      @id @default(cuid())
  url             String
  status          TaskStatus  @default(PENDING)
  authoritative   Boolean?
  entityId        String?
  entity          RemoteEntity? @relation(fields: [entityId], references: [id])
  createdAt       DateTime    @default(now())
  successAt       DateTime?
  failedAt        DateTime?   // the first failure - may have/will retry
}

model RemoteProfile {
  id              String      @id @default(cuid())
  entityId        String      @unique
  entity          RemoteEntity @relation(fields: [entityId], references: [id])
  server          String
  username        String
  notes           RemoteNoteAuthor[]

  @@index([server, username])
}

model RemoteNoteAuthor {
  id              String      @id @default(cuid())
  profileId       String
  profile         RemoteProfile @relation(fields: [profileId], references: [id])
  noteId          String
  note            RemoteNote  @relation(fields: [noteId], references: [id])
}

model RemoteNote {
  id              String      @id @default(cuid())
  entityId        String      @unique
  entity          RemoteEntity @relation(fields: [entityId], references: [id])
  authorId        String
  postId          String
  authors         RemoteNoteAuthor[]

  @@index([authorId, postId])
}

model Item {
  id              String      @id @default(cuid())
  profileId       String
  profile         Profile     @relation(fields: [profileId], references: [id])
  localOnly       Boolean
  privacy         Visibility
  type            ContentType
  noteId          String?
  note            Note?       @relation(name: "author", fields: [noteId], references: [id])
  noteAuthor      AuthorType?
  repostId        String?
  seamlessRepost  Boolean?
  repostOf        Item?       @relation(name: "repost", fields: [repostId], references: [id])
  reposts         Item[]      @relation(name: "repost")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publishAt       DateTime?
}
